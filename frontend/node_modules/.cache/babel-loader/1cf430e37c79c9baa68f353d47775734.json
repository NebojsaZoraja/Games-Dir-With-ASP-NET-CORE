{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neboj\\u0161a\\\\Desktop\\\\Games-Dir-api\\\\frontend\\\\src\\\\screens\\\\AllGamesScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Game from \"../components/Game\";\nimport { getGameGenres, listGames } from \"../actions/gameActions\";\nimport Loader from \"../components/Loader\";\nimport Carousel from \"react-multi-carousel\";\nimport useDynamicRefs from \"use-dynamic-refs\";\nimport Message from \"../components/Message\";\nimport Meta from \"../components/Meta\";\nimport { listGenres } from \"../actions/genreActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AllGamesScreen = () => {\n  _s();\n\n  const gameList = useSelector(state => state.gameList);\n  const {\n    loading,\n    error,\n    games\n  } = gameList;\n  const [getRef, setRef] = useDynamicRefs();\n  const responsive = {\n    superLargeDesktop: {\n      breakpoint: {\n        max: 4000,\n        min: 3000\n      },\n      items: 5,\n      slidesToSlide: 5\n    },\n    desktop: {\n      breakpoint: {\n        max: 3000,\n        min: 1024\n      },\n      items: 4,\n      slidesToSlide: 4\n    },\n    tablet: {\n      breakpoint: {\n        max: 1024,\n        min: 464\n      },\n      items: 2,\n      slidesToSlide: 3\n    },\n    mobile: {\n      breakpoint: {\n        max: 464,\n        min: 0\n      },\n      items: 1,\n      slidesToSlide: 1\n    }\n  };\n  const genresList = useSelector(state => state.genresList);\n  const {\n    genres\n  } = genresList;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(listGenres());\n    dispatch(listGames(\"\"));\n  }, [dispatch]);\n\n  const scrollToRef = ref => {\n    window.scrollTo(0, ref.current.offsetTop);\n  };\n\n  const executeScroll = ref => scrollToRef(ref);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Meta, {\n      title: \"Games-Dir | All Games\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }, this), error ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"py-lg-4 py-2\",\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            horizontal: \"lg\",\n            children: genres.map(genre => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              onClick: () => executeScroll(getRef(genre)),\n              style: {\n                cursor: \"pointer\",\n                textAlign: \"center\",\n                fontSize: 15,\n                fontWeight: \"bold\"\n              },\n              action: true,\n              variant: \"dark\",\n              children: genre.name\n            }, genre.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), genres.map(genre => /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          borderBottom: \"solid\",\n          borderWidth: \"0.5px\"\n        },\n        className: \"justify-content-center\",\n        ref: setRef(genre),\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-center py-2\",\n          children: genre.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Carousel, {\n          className: \"w-100\",\n          responsive: responsive,\n          renderButtonGroupOutside: true,\n          infinite: true,\n          children: games.map(game => game.genre.id === genre.id && /*#__PURE__*/_jsxDEV(Col, {\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(Game, {\n              game: game\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this)\n          }, game.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, genre.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)), \" \"]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllGamesScreen, \"0yS85TG2tmSMe+Lp3hCKXDvZcBU=\", false, function () {\n  return [useSelector, useDynamicRefs, useSelector, useDispatch];\n});\n\n_c = AllGamesScreen;\nexport default AllGamesScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllGamesScreen\");","map":{"version":3,"sources":["C:/Users/Neboj≈°a/Desktop/Games-Dir-api/frontend/src/screens/AllGamesScreen.jsx"],"names":["React","useEffect","Col","ListGroup","Row","useDispatch","useSelector","Game","getGameGenres","listGames","Loader","Carousel","useDynamicRefs","Message","Meta","listGenres","AllGamesScreen","gameList","state","loading","error","games","getRef","setRef","responsive","superLargeDesktop","breakpoint","max","min","items","slidesToSlide","desktop","tablet","mobile","genresList","genres","dispatch","scrollToRef","ref","window","scrollTo","current","offsetTop","executeScroll","message","map","genre","cursor","textAlign","fontSize","fontWeight","name","id","borderBottom","borderWidth","game"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Game from \"../components/Game\";\r\nimport { getGameGenres, listGames } from \"../actions/gameActions\";\r\nimport Loader from \"../components/Loader\";\r\nimport Carousel from \"react-multi-carousel\";\r\nimport useDynamicRefs from \"use-dynamic-refs\";\r\nimport Message from \"../components/Message\";\r\nimport Meta from \"../components/Meta\";\r\nimport { listGenres } from \"../actions/genreActions\";\r\n\r\nconst AllGamesScreen = () => {\r\n  const gameList = useSelector((state) => state.gameList);\r\n  const { loading, error, games } = gameList;\r\n  const [getRef, setRef] = useDynamicRefs();\r\n\r\n  const responsive = {\r\n    superLargeDesktop: {\r\n      breakpoint: { max: 4000, min: 3000 },\r\n      items: 5,\r\n      slidesToSlide: 5,\r\n    },\r\n    desktop: {\r\n      breakpoint: { max: 3000, min: 1024 },\r\n      items: 4,\r\n      slidesToSlide: 4,\r\n    },\r\n    tablet: {\r\n      breakpoint: { max: 1024, min: 464 },\r\n      items: 2,\r\n      slidesToSlide: 3,\r\n    },\r\n    mobile: {\r\n      breakpoint: { max: 464, min: 0 },\r\n      items: 1,\r\n      slidesToSlide: 1,\r\n    },\r\n  };\r\n\r\n  const genresList = useSelector((state) => state.genresList);\r\n  const { genres } = genresList;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(listGenres());\r\n    dispatch(listGames(\"\"));\r\n  }, [dispatch]);\r\n\r\n  const scrollToRef = (ref) => {\r\n    window.scrollTo(0, ref.current.offsetTop);\r\n  };\r\n  const executeScroll = (ref) => scrollToRef(ref);\r\n\r\n  return (\r\n    <div>\r\n      <Meta title=\"Games-Dir | All Games\" />\r\n      {loading && <Loader />}\r\n      {error ? (\r\n        <Message variant=\"danger\">{error.message}</Message>\r\n      ) : (\r\n        <>\r\n          <Row className=\"justify-content-center\">\r\n            <Col className=\"py-lg-4 py-2\">\r\n              <ListGroup horizontal=\"lg\">\r\n                {genres.map((genre) => (\r\n                  <ListGroup.Item\r\n                    onClick={() => executeScroll(getRef(genre))}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      textAlign: \"center\",\r\n                      fontSize: 15,\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                    key={genre.id}\r\n                    action\r\n                    variant=\"dark\"\r\n                  >\r\n                    {genre.name}\r\n                  </ListGroup.Item>\r\n                ))}\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n          {genres.map((genre) => (\r\n            <Row\r\n              style={{ borderBottom: \"solid\", borderWidth: \"0.5px\" }}\r\n              className=\"justify-content-center\"\r\n              ref={setRef(genre)}\r\n              key={genre.id}\r\n            >\r\n              <h4 className=\"text-center py-2\">{genre.name}</h4>\r\n              <Carousel\r\n                className=\"w-100\"\r\n                responsive={responsive}\r\n                renderButtonGroupOutside={true}\r\n                infinite={true}\r\n              >\r\n                {games.map(\r\n                  (game) =>\r\n                    game.genre.id === genre.id && (\r\n                      <Col key={game.id} xs={11}>\r\n                        <Game game={game} />\r\n                      </Col>\r\n                    )\r\n                )}\r\n              </Carousel>\r\n            </Row>\r\n          ))}{\" \"}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllGamesScreen;\r\n"]},"metadata":{},"sourceType":"module"}