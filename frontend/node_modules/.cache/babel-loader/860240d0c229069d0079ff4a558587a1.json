{"ast":null,"code":"import { GENRE_CREATE_FAIL, GENRE_CREATE_REQUEST, GENRE_CREATE_SUCCESS, GENRE_DELETE_FAIL, GENRE_DELETE_REQUEST, GENRE_DELETE_SUCCESS, GENRE_DETAILS_FAIL, GENRE_DETAILS_REQUEST, GENRE_DETAILS_SUCCESS, GENRE_LIST_FAIL, GENRE_LIST_REQUEST, GENRE_LIST_SUCCESS, GENRE_UPDATE_FAIL, GENRE_UPDATE_REQUEST, GENRE_UPDATE_SUCCESS } from \"../constatns/genreConstants\";\nimport axios from \"axios\";\nexport const listGenres = () => async dispatch => {\n  try {\n    dispatch({\n      type: GENRE_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/genres');\n    console.log(data);\n    dispatch({\n      type: GENRE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GENRE_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createGenre = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GENRE_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/genres/`, {}, config);\n    dispatch({\n      type: GENRE_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GENRE_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateGenre = genre => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GENRE_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/genres/${genre._id}`, genre, config);\n    dispatch({\n      type: GENRE_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GENRE_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getGenreDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GENRE_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/genres/${id}`, config);\n    dispatch({\n      type: GENRE_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GENRE_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteGenre = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GENRE_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/genres/${id}`, config);\n    dispatch({\n      type: GENRE_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: GENRE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/NebojÅ¡a/Desktop/Games-Dir-ASP.NET/frontend/src/actions/genreActions.js"],"names":["GENRE_CREATE_FAIL","GENRE_CREATE_REQUEST","GENRE_CREATE_SUCCESS","GENRE_DELETE_FAIL","GENRE_DELETE_REQUEST","GENRE_DELETE_SUCCESS","GENRE_DETAILS_FAIL","GENRE_DETAILS_REQUEST","GENRE_DETAILS_SUCCESS","GENRE_LIST_FAIL","GENRE_LIST_REQUEST","GENRE_LIST_SUCCESS","GENRE_UPDATE_FAIL","GENRE_UPDATE_REQUEST","GENRE_UPDATE_SUCCESS","axios","listGenres","dispatch","type","data","get","console","log","payload","error","response","message","createGenre","getState","userLogin","userInfo","config","headers","Authorization","token","post","updateGenre","genre","put","_id","getGenreDetails","id","deleteGenre","delete"],"mappings":"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","sourcesContent":["import { GENRE_CREATE_FAIL, GENRE_CREATE_REQUEST, GENRE_CREATE_SUCCESS, GENRE_DELETE_FAIL, GENRE_DELETE_REQUEST, GENRE_DELETE_SUCCESS, GENRE_DETAILS_FAIL, GENRE_DETAILS_REQUEST, GENRE_DETAILS_SUCCESS, GENRE_LIST_FAIL, GENRE_LIST_REQUEST, GENRE_LIST_SUCCESS, GENRE_UPDATE_FAIL, GENRE_UPDATE_REQUEST, GENRE_UPDATE_SUCCESS } from \"../constatns/genreConstants\";\r\nimport axios from \"axios\";\r\n\r\nexport const listGenres = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GENRE_LIST_REQUEST });\r\n\r\n        const { data } = await axios.get('/api/genres');\r\n\r\n        console.log(data);\r\n\r\n        dispatch({\r\n            type: GENRE_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GENRE_LIST_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const createGenre = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: GENRE_CREATE_REQUEST\r\n        })\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(`/api/genres/`, {}, config);\r\n\r\n        dispatch({\r\n            type: GENRE_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GENRE_CREATE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateGenre = (genre) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: GENRE_UPDATE_REQUEST\r\n        })\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/genres/${genre._id}`, genre, config);\r\n\r\n        dispatch({\r\n            type: GENRE_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GENRE_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}\r\n\r\nexport const getGenreDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: GENRE_DETAILS_REQUEST });\r\n\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/genres/${id}`, config);\r\n\r\n        dispatch({\r\n            type: GENRE_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GENRE_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteGenre = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: GENRE_DELETE_REQUEST\r\n        })\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        await axios.delete(`/api/genres/${id}`, config);\r\n\r\n        dispatch({\r\n            type: GENRE_DELETE_SUCCESS,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GENRE_DELETE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}